Это некоторый результат моих мыслей на тему задания про посуду.
Как это работает:
1) GenerateOfDirtyDishes генерит посуда разного размра и степени загрязнения. Сщздаёт fifo и с помощью него передаёт на следющий этап.
2) WasherUp - моет посуду, связан с первым звеном при помощи fifo. Со следующим связан с помощью очереди, которая блокируется семофором.
3) Table - абстрактный стол фикс площади, каждая посудина ждёт( параллельный поток для каждого предмета на столе), пока её вытрут. 
4) Wiper - вытирает посуду, изменяет семафор.
5) Clear - очищает всё структуры.


V: Филипп, давайте вы при личной встрече поясните, что вы придумали. 
Просто получилось не совсем то, что планировалось мной. 
Хотелось, чтобы у вас было реализовано несколько способов коммуникации (например, либо всё делаем через разделяемую память и семафоры, либо всё через очереди сообщений).
При это в коде дублирование кода было минимальным (в этом задумка была). Вы реализовали сразу несколько способов.
Мне, конечно, стоило сначала на каком-то примере показать, что именно требуется.

Всякий труд надо поощрять, поэтому давайте не будем ничего переделывать, а удостоверимся на семинаре, что то, что сейчас есть, работает корректно, 
и зачтём это его вместо какого-нибудь другого обязательного упражнения.

Я предполагал, чтобу будет два процесса Washer (считывает набор грязной посуды из файла, либо сам себе его заранее генерирует) и Wiper. Также будет некая сущность "стол".
И будет три ф-и int InitializeTable(char* auxFileName), void PutToTable(int tableId /*то, что вернёт InitializeTable фактически*/, Dish dish), Dish GetFromTable(int tableId). 
Всю логику работы можно описать, используя для работы со столом эти 3 ф-и, даже не вдоваясь в подробности их конкретной реализации, но предполагая, что
если стол переполнится, то PutToTable "зависнет", пока вытиральщик не заберёт новую тарелку, а GetFromTable зависнет, если на столе не будет ни одной тарелки.

Дальше конкретный способ реализации "стола" будет спрятан внутри только (!) этих трех ф-й.
Это очень удобно, т.к. 
стороннему человеку легко реализовать новый способ коммуникации, т.к. надо реализовать только эти ф-и, не вдоваясь в остальные подробности.
Эти ф-и можно вынести в отдельный *.h файл, и не дублировать дважды в мойщике и вытиральщике.
